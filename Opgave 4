## opgave 4,1
## Pakker
library(tidyverse)
library(zoo)
library(dkstat)

## Hent Forbrugertillid via DST API
tillid_meta <- dst_meta(table="FORV1", lang="da")

my_query_tillid <- list(
  INDIKATOR = "*",
  Tid = "*"
)

tillid_data <- dst_get_data(table = "FORV1", query = my_query_tillid)
View(tillid_data)


## Konverter fra langt til bredt format
tillid_data <- tillid_data %>%
  pivot_wider(names_from = INDIKATOR, values_from = value)


## Hent forbrugsdata via DST API
forbrug_meta <- dst_meta(table="NKHC021", lang="da")

my_query_forbrug <- list(
  FORMAAAL = "I alt",
  PRISENHED = "2020-priser, kædede værdier",
  SÆSON = "Sæsonkorrigeret",
  Tid = "*"
)

forbrug_data <- dst_get_data(table = "NKHC021", query = my_query_forbrug)
View(forbrug_data)


## Fjern unødvendig data fra dataframes
forbrug_data <- forbrug_data[,-1:-3]
forbrug_data <- forbrug_data[-1:-24,]
rownames(forbrug_data) <- NULL
tillid_data <- tillid_data[256:nrow(tillid_data),]


## Omkonverter datoer til kvartaler i tillid_data
tillid_data <- tillid_data %>%
  mutate(Kvartal = as.yearqtr(TID, format = "%Y-%m-%d"))


## Gruppering og opsummering med udregning af mean
tillid_data <- tillid_data %>%
  group_by(Kvartal) %>%
  summarise(across(where(is.numeric), mean, na.rm = TRUE))

## Tilpas længde i tillid til forbrug (forbrug bliver kun opdateret kvartalsvis imod månedsvis)
tillid_data <- tillid_data[1:nrow(forbrug_data),]


## Udregner realvæksten sammenlignet med samme kvartal sidste år
for (i in (5:nrow(forbrug_data))){
  Realvækst <- (forbrug_data[i, 2] - forbrug_data[i-4, 2]) / forbrug_data[i-4, 2] * 100
  forbrug_data[i,"Realvækst"] = Realvækst
}

## Skaleringsfaktor til realvækst i anden y-akse
scale_factor <- 2.0

## ggplot
ggplot()+
  geom_bar(aes(x = tillid_data$Kvartal, y = forbrug_data$Realvækst * scale_factor), 
           stat = "identity", fill = "cornflowerblue")+
  geom_line(aes(x = tillid_data$Kvartal, y = tillid_data$Forbrugertillidsindikatoren), 
            color = "orange", size = 1)+
  scale_y_continuous(sec.axis = sec_axis(~ . / scale_factor, name = "Årlig kvartalsvis realvækst i privatforbrug (%)")) +
  labs(x = "År & kvartal", 
       y = "Forbrugertillidsindikatoren i nettotal", 
       title = "Forbrugertillidsindikatoren falder i højere grad ift. realvæksten",
       subtitle = "Forbrugertillidsindikatoren er et simpelt gennemsnit af 5 spørgsmål",
       caption = "Kilde: Danmarks Statistik 
       Linjen repræsenterer Forbrugertillidsindikatoren (venstre akse) 
       Søjlerne repræsenterer realvæksten i privatforbrug i % (højre akse)",)+
  theme_minimal()

#### opgave 4.2 #####
# regnet med de nye opdaterede tal
gennemsnit <- mean(tillid_data$`Anskaffelse af større forbrugsgoder, fordelagtigt for øjeblikket`, na.rm = TRUE)
print(gennemsnit)



#### opgave 4,3 #####
husforbrug_meta <- dst_meta(table="NKHC021", lang="da")

# liste
my_query_husforbrug <- list(
  FORMAAAL = "*",
  PRISENHED = "Løbende priser",
  SÆSON = "Sæsonkorrigeret",
  Tid = "*"
)

husforbrug_data <- dst_get_data(table = "NKHC021", query = my_query_husforbrug)
View(husforbrug_data)

## Konverter fra langt til bredt format
husforbrug_data <- husforbrug_data %>%
  pivot_wider(names_from = FORMAAAL, values_from = value)

husforbrug_data <- t(husforbrug_data)

## klip 2023 ud

husforbrug2023_data <- as.data.frame(husforbrug_data[-1:-4,133:136])

# konvater V1, V2, V3 ,V4 til numeric
husforbrug2023_data <- husforbrug2023_data %>% 
  mutate_all(as.numeric)

husforbrug2023_data <- husforbrug2023_data %>% 
  mutate(sum_2023 = V1 + V2 + V3 + V4)

## 2020 - 2023

husforbrug2020_data <- as.data.frame(husforbrug_data[-1:-4,121:124])

# konvater V1, V2, V3 ,V4 til numeric
husforbrug2020_data <- husforbrug2020_data %>% 
  mutate_all(as.numeric)

husforbrug2020_data <- husforbrug2020_data %>% 
  mutate(sum_2020 = V1 + V2 + V3 + V4)

# sammensæt sum fra 2020 og 2023
husforbrug_sum <- as.data.frame(husforbrug2020_data[,-1:-4])

husforbrug_sum <- cbind(husforbrug_sum, husforbrug2023_data$sum_2023)
colnames(husforbrug_sum) = c("sum2020", "sum2023")

husforbrug_sum <- husforbrug_sum %>% 
  mutate(procentvis_ændring = round((sum2023 - sum2020) / sum2020 *100, 2))
